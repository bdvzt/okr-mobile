//
//  RequestRepositoryImpl.swift
//  OKR
//
//  Created by Zayata Budaeva on 13.03.2025.
//

import Foundation

final class RequestRepositoryImpl: RequestRepository {
    private let networkService: NetworkServiceProtocol

    init(networkService: NetworkServiceProtocol = NetworkService()) {
        self.networkService = networkService
    }

    func sendRequest(dates: CreateRequestDTO) async throws -> RequestDTO {
        let requestData = try JSONEncoder().encode(dates)
        let config = RequestNetworkConfig.createRequest(requestData)

        let responseData = try await networkService.requestRaw(config: config, authorized: true)

        do {
            let decodedResponse = try JSONDecoder().decode(RequestDTO.self, from: responseData)
            print("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏): \(decodedResponse)")
            return decodedResponse
        } catch {
            let responseString = String(data: responseData, encoding: .utf8) ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
            print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(error.localizedDescription), –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \(responseString)")
            throw NSError(domain: "RequestError", code: -1, userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(error.localizedDescription)"])
        }
    }

    func extendRequest(id: Int, date: ExtendRequestDateDTO) async throws {
        let requestData = try JSONEncoder().encode(date)
        let config = RequestNetworkConfig.extendDateRequest(id: id, data: requestData)

        let responseData = try await networkService.requestRaw(config: config, authorized: true)

        if let responseString = String(data: responseData, encoding: .utf8) {
            print("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏): \(responseString)")
        } else {
            print("–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
        }
    }

    func getRequestInfo(requestId: Int) async throws -> RequestDetailsDTO {
        let config = RequestNetworkConfig.getRequestInfo(requestId: requestId)
        print("üîó URL: \(config.path + config.endPoint)")
        print("üÜî ID –∑–∞—è–≤–∫–∏: \(requestId)")
        print("üìå HTTP –ú–µ—Ç–æ–¥: \(config.method.rawValue)")
        let responseData = try await networkService.requestRaw(config: config, authorized: true)
        do {
            let decodedResponse = try JSONDecoder().decode(RequestDetailsDTO.self, from: responseData)
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ: \(decodedResponse)")
            return decodedResponse
        } catch {
            let responseString = String(data: responseData, encoding: .utf8) ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(error.localizedDescription), –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \(responseString)")
            throw NSError(domain: "RequestError", code: -1, userInfo: [
                NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(error.localizedDescription)"
            ])
        }
    }

    func uploadFile(requestId: Int, file: Data, fileName: String, mimeType: String) async throws {
        let uploadURL = URL(string: "http://95.182.120.75:8081/request/upload/\(requestId)")!

        print("üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ \(fileName) –≤ –∑–∞—è–≤–∫—É ID: \(requestId) —Å MIME-—Ç–∏–ø–æ–º \(mimeType)")

        try await networkService.uploadFileRequest(
            url: uploadURL,
            fileData: file,
            fileName: fileName,
            mimeType: mimeType,
            authorized: true
        )
    }

    func unpinFile(requestId: Int, fileId: Int) async throws {
        let config = RequestNetworkConfig.unpinConfirmationFile(requestId: requestId, fileId: fileId)
        _ = try await networkService.requestRaw(config: config, authorized: true)
    }
}
